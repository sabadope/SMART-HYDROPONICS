import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'core/theme/app_theme.dart';
import 'core/utils/preferences_helper.dart';
import 'core/constants/app_constants.dart';
import 'config/supabase_config.dart';
import 'services/auth_service.dart';
import 'services/image_upload_service.dart';
import 'services/plant_service.dart';
import 'shared/models/plant_model.dart';
import 'rbac/rbac.dart';
import 'features/features.dart';
import 'config/routes.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Supabase
  await SupabaseConfig.initialize();

  // Initialize RBAC on app startup
  await AuthService.initializeRBACOnStartup();

  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  bool _hasSeenOnboarding = false;
  bool _isAuthenticated = false;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _checkAppStatus();
  }

  Future<void> _checkAppStatus() async {
    final hasSeenOnboarding = await PreferencesHelper.getHasSeenOnboarding();
    final isAuthenticated = AuthService.isAuthenticated();

    setState(() {
      _hasSeenOnboarding = hasSeenOnboarding;
      _isAuthenticated = isAuthenticated;
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const MaterialApp(
        home: Scaffold(
          body: Center(
            child: CircularProgressIndicator(),
          ),
        ),
      );
    }

    Widget _getInitialScreen() {
      if (!_hasSeenOnboarding) {
        return const OnboardingScreen();
      } else if (!_isAuthenticated) {
        return const LoginScreen();
      } else {
        return const RootScaffold();
      }
    }

    return MaterialApp(
      title: AppConstants.appName,
      theme: AppTheme.lightTheme,
      home: _getInitialScreen(),
      debugShowCheckedModeBanner: false,
      routes: AppRoutes.routes,
      onGenerateRoute: AppRoutes.onGenerateRoute,
    );
  }
}

class RootScaffold extends StatefulWidget {
  const RootScaffold({super.key});

  @override
  State<RootScaffold> createState() => _RootScaffoldState();
}

class _RootScaffoldState extends State<RootScaffold> {
  int _selectedIndex = 0;
  bool _isFirstTimeUser = true; // Track first-time user experience
  bool _isAdmin = false;
  bool _isLoadingRole = true;

  @override
  void initState() {
    super.initState();
    _checkUserRole();
  }

  // Method to refresh role check (can be called when navigating to home)
  Future<void> refreshUserRole() async {
    print('üîÑ REFRESH: Re-checking user role...');
    await _checkUserRole();
  }

  Future<void> _checkUserRole() async {
    try {
      // Wait a bit for session to be fully established
      await Future.delayed(const Duration(milliseconds: 500));

      final user = AuthService.getCurrentUser();
      print('üîç DEBUG: Current user: ${user?.email}');
      print('üîç DEBUG: User ID: ${user?.id}');
      print('üîç DEBUG: Authenticated: ${AuthService.isAuthenticated()}');

      if (user != null) {
        // RBAC will handle role checking and context initialization
        // The AuthService.initializeRBACUserContext() should have been called on startup
        final rbacService = RBACService();
        final userContext = rbacService.currentUser;

        print('üîê RBAC: User context: ${userContext?.role.value ?? 'none'}');
        print('üîê RBAC: Is authenticated: ${userContext?.isAuthenticated ?? false}');

        final isAdmin = userContext?.role.isAdmin ?? false;

        if (mounted) {
          setState(() {
            _isAdmin = isAdmin;
            _isLoadingRole = false;
          });

          print('üîç DEBUG: Final _isAdmin state: $_isAdmin');
          print('üéØ DEBUG: User will see: ${isAdmin ? 'AdminDashboardScreen' : 'DashboardPage'}');
        }
      } else {
        print('üîç DEBUG: No user found, setting _isLoadingRole to false');
        if (mounted) {
          setState(() => _isLoadingRole = false);
        }
      }
    } catch (e) {
      print('‚ùå ERROR: Error checking user role: $e');
      print('üîç ERROR details: ${e.toString()}');
      // Default to regular user on error
      if (mounted) {
        setState(() {
          _isAdmin = false;
          _isLoadingRole = false;
        });
      }
    }
  }

  List<Widget> get _pages => _isAdmin
      ? [const AdminDashboardScreen()]
      : [const DashboardPage()];

  @override
  Widget build(BuildContext context) {
    final ColorScheme scheme = Theme.of(context).colorScheme;

    // Show loading while checking user role
    if (_isLoadingRole) {
      return Scaffold(
        body: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Color(0xFFE9FFF4), Color(0xFFBFF3D8), Color(0xFF77D9AA)],
              stops: [0.0, 0.5, 1.0],
            ),
          ),
          child: const Center(
            child: CircularProgressIndicator(
              color: Color(0xFF4ADE80),
            ),
          ),
        ),
      );
    }

    // Admin users get their own dashboard without navigation
    if (_isAdmin) {
      print('üéØ DEBUG: Rendering AdminDashboardScreen for admin user');
      return const AdminDashboardScreen();
    }

    // Regular users get the standard navigation with their dashboard
    print('üë§ DEBUG: Rendering regular user dashboard (_isAdmin: $_isAdmin)');
    return Scaffold(
      extendBody: true,
      extendBodyBehindAppBar: true,
      body: Stack(
        children: [
          // Richer green background with subtle glows
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [Color(0xFFE9FFF4), Color(0xFFBFF3D8), Color(0xFF77D9AA)],
                stops: [0.0, 0.5, 1.0],
              ),
            ),
          ),
          // Soft radial glows for depth (not animations)
          Positioned(
            top: -60,
            left: -40,
            child: Container(
              width: 220,
              height: 220,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: RadialGradient(
                  colors: [Colors.white.withValues(alpha: 0.22), Colors.transparent],
                  stops: const [0.0, 1.0],
                ),
              ),
            ),
          ),
          Positioned(
            bottom: -80,
            right: -60,
            child: Container(
              width: 260,
              height: 260,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: RadialGradient(
                  colors: [const Color(0xFF57CC99).withValues(alpha: 0.24), Colors.transparent],
                  stops: const [0.0, 1.0],
                ),
              ),
            ),
          ),

          IndexedStack(
            index: _selectedIndex,
            children: _pages,
          ),
        ],
      ),

      bottomNavigationBar: Container(
        height: 120,
        color: Colors.transparent,
        child: Stack(
          children: [
            // Left capsule tab - Home with glass morphism
            Positioned(
              bottom: 25,
              left: 40,
              child: GestureDetector(
                onTap: () {
                  setState(() {
                    _selectedIndex = 0;
                    _isFirstTimeUser = false; // User has interacted, no longer first-time
                  });
                },
                child: CapsuleGlassMorphismTab(
                  icon: Icons.home,
                  isSelected: _isFirstTimeUser ? false : _selectedIndex == 0,
                  selectedColor: const Color(0xFF4ADE80),
                ),
              ),
            ),
            // Right capsule tab - Bar Chart with glass morphism
            Positioned(
              bottom: 25,
              right: 40,
              child: GestureDetector(
                onTap: () {
                  setState(() {
                    _selectedIndex = 2;
                    _isFirstTimeUser = false; // User has interacted, no longer first-time
                  });
                },
                child: CapsuleGlassMorphismTab(
                  icon: Icons.bar_chart,
                  isSelected: _isFirstTimeUser ? false : _selectedIndex == 2,
                  selectedColor: const Color(0xFF4ADE80),
                ),
              ),
            ),
            // Enhanced 3D glass morphism CTA button with plant icon
            Positioned(
              bottom: 35,
              left: 0,
              right: 0,
              child: Center(
                child: GestureDetector(
                  onTap: () {
                    setState(() {
                      _isFirstTimeUser = false; // User has interacted, no longer first-time
                    });
                    Navigator.of(context).push(
                      MaterialPageRoute(
                        builder: (_) => const PlantScreen(),
                      ),
                    );
                  },
                  child: GlassMorphismCTAButton(
                    icon: Icons.eco,
                    isSelected: _isFirstTimeUser ? true : _selectedIndex == 1,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}





class GlossyIcon extends StatelessWidget {
  final IconData icon;
  final double size;
  final Color color;
  const GlossyIcon({super.key, required this.icon, required this.size, this.color = Colors.white});

  @override
  Widget build(BuildContext context) {
    final double glowSize = size * 1.1;
    return Stack(
      alignment: Alignment.center,
      children: [
        // Outer glow
        IgnorePointer(
          child: Container(
            width: glowSize,
            height: glowSize,
            decoration: const BoxDecoration(
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(color: Color(0x66FFFFFF), blurRadius: 10, spreadRadius: 2),
                BoxShadow(color: Color(0x33FFFFFF), blurRadius: 20, spreadRadius: 6),
              ],
            ),
          ),
        ),
        // Icon
        Icon(icon, size: size, color: color),
        // Inner glow highlight
        IgnorePointer(
          child: Container(
            width: glowSize,
            height: glowSize,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              gradient: RadialGradient(
                colors: [Colors.white.withValues(alpha: 0.22), Colors.transparent],
                stops: const [0.0, 1.0],
              ),
            ),
          ),
        ),
      ],
    );
  }
}

// Metrics available in the dashboard
enum MetricType { water, nutrients, ph }

class MetricConfig {
  final MetricType type;
  final String label;
  final String resultLabel;
  final String valueText;
  final IconData icon;
  final Color startColor;
  final Color endColor;
  final double progress; // 0..1 visual emphasis
  final String statusText;

  const MetricConfig({
    required this.type,
    required this.label,
    required this.resultLabel,
    required this.valueText,
    required this.icon,
    required this.startColor,
    required this.endColor,
    required this.progress,
    required this.statusText,
  });
}

class DashboardPage extends StatefulWidget {
  const DashboardPage({super.key});

  @override
  State<DashboardPage> createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage> with SingleTickerProviderStateMixin {
  MetricType selected = MetricType.water;
  late final AnimationController _floatController;
  late final Animation<double> _float;
  late final Animation<double> _pulse;

  late AnimationController _shadowController;
  late Animation<double> _shadowStretch;

  MetricConfig configFor(MetricType type) {
    switch (type) {
      case MetricType.water:
        return const MetricConfig(
          type: MetricType.water,
          label: 'Water',
          resultLabel: 'Water level',
          valueText: '72%',
          icon: Icons.water_drop,
          startColor: Color(0xFF00B4D8),
          endColor: Color(0xFF48CAE4),
          progress: 0.72,
          statusText: 'Optimal',
        );
      case MetricType.nutrients:
        return const MetricConfig(
          type: MetricType.nutrients,
          label: 'Nutrients',
          resultLabel: 'Nutrients level',
          valueText: '480 ppm',
          icon: Icons.biotech,
          startColor: Color(0xFF80ED99),
          endColor: Color(0xFF57CC99),
          progress: 0.48,
          statusText: 'Good',
        );
      case MetricType.ph:
        return const MetricConfig(
          type: MetricType.ph,
          label: 'pH',
          resultLabel: 'pH level',
          valueText: '6.5',
          icon: Icons.speed,
          startColor: Color(0xFFFFAFCC),
          endColor: Color(0xFFFFC8DD),
          progress: 0.46, // 6.5/14 approx
          statusText: 'Slightly acidic',
        );
    }
  }

  Future<void> _handleLogout(BuildContext context) async {
    final shouldLogout = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        title: Text(
          'Logout',
          style: GoogleFonts.inter(
            fontWeight: FontWeight.w700,
            color: Colors.black87,
          ),
        ),
        content: Text(
          'Are you sure you want to logout? You will need to sign in again to access your account.',
          style: GoogleFonts.inter(
            color: Colors.grey[700],
            fontSize: 14,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text(
              'Cancel',
              style: GoogleFonts.inter(
                color: Colors.grey[600],
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFEF4444),
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: Text(
              'Logout',
              style: GoogleFonts.inter(
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );

    if (shouldLogout == true && context.mounted) {
      try {
        await AuthService.signOut();
        // Navigate back to login screen
        Navigator.of(context).pushReplacementNamed('/login');
      } catch (e) {
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error logging out: ${e.toString()}'),
              backgroundColor: AppTheme.errorColor,
            ),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final MetricConfig selectedConfig = configFor(selected);

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        toolbarHeight: 84, // Increased height to accommodate full shadow effect
        title: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Container(
              margin: const EdgeInsets.only(left: 8, top: 9, bottom: 9),
              child: GestureDetector(
                onTap: () => _handleLogout(context),
                child: Container(
                  width: 44,
                  height: 44,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        Colors.white.withValues(alpha: 0.95),
                        Colors.white.withValues(alpha: 0.85),
                      ],
                    ),
                    border: Border.all(
                      color: Colors.white.withValues(alpha: 0.4),
                      width: 2,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.15),
                        blurRadius: 16,
                        offset: const Offset(0, 6),
                        spreadRadius: 2,
                      ),
                      BoxShadow(
                        color: Colors.white.withValues(alpha: 0.4),
                        blurRadius: 12,
                        offset: const Offset(-3, -3),
                        spreadRadius: 1,
                      ),
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.08),
                        blurRadius: 8,
                        offset: const Offset(2, 2),
                        spreadRadius: 0,
                      ),
                    ],
                  ),
                  child: Container(
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      gradient: RadialGradient(
                        center: Alignment.topLeft,
                        radius: 0.8,
                        colors: [
                          Colors.white.withValues(alpha: 0.5),
                          Colors.transparent,
                        ],
                      ),
                    ),
                    child: Transform(
                      alignment: Alignment.center,
                      transform: Matrix4.rotationY(3.14159), // Flip horizontally (180 degrees in radians)
                      child: const Icon(
                        Icons.logout,
                        color: Color(0xFFEF4444), // Red color for logout
                        size: 22,
                      ),
                    ),
                  ),
                ),
              ),
            ),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Text(
                'Hydro Monitor',
                style: GoogleFonts.inter(
                  fontWeight: FontWeight.w600,
                  fontSize: 20,
                ),
              ),
            ),
            Container(
              margin: const EdgeInsets.only(right: 8, top: 9, bottom: 9),
              child: GestureDetector(
                onTap: () {
                  showModalBottomSheet(
                    context: context,
                    isScrollControlled: true,
                    backgroundColor: Colors.transparent,
                    builder: (BuildContext context) {
                      return const AddPlantBottomSheet();
                    },
                  );
                },
                child: Container(
                  width: 44,
                  height: 44,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        Colors.white.withValues(alpha: 0.95),
                        Colors.white.withValues(alpha: 0.85),
                      ],
                    ),
                    border: Border.all(
                      color: Colors.white.withValues(alpha: 0.4),
                      width: 2,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.15),
                        blurRadius: 16,
                        offset: const Offset(0, 6),
                        spreadRadius: 2,
                      ),
                      BoxShadow(
                        color: Colors.white.withValues(alpha: 0.4),
                        blurRadius: 12,
                        offset: const Offset(-3, -3),
                        spreadRadius: 1,
                      ),
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.08),
                        blurRadius: 8,
                        offset: const Offset(2, 2),
                        spreadRadius: 0,
                      ),
                    ],
                  ),
                  child: Container(
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      gradient: RadialGradient(
                        center: Alignment.topLeft,
                        radius: 0.8,
                        colors: [
                          Colors.white.withValues(alpha: 0.5),
                          Colors.transparent,
                        ],
                      ),
                    ),
                    child: const Icon(
                      Icons.add,
                      color: Color(0xFF3B82F6), // Blue color
                      size: 22,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        centerTitle: true,
        backgroundColor: Colors.transparent,
        surfaceTintColor: Colors.transparent,
        elevation: 0,
        scrolledUnderElevation: 0,
      ),
      backgroundColor: Colors.transparent,
      body: SafeArea(
        child: Center(
          child: AnimatedBuilder(
            animation: _floatController,
            builder: (context, child) {
              return Transform.translate(
                offset: Offset(0, _float.value),
                child: Transform.scale(
                  scale: 1.0 + (_pulse.value * 0.02),
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      // Shadow with adjustable margins
                      Container(
                        margin: const EdgeInsets.only(
                          top: 160,   // distance from image
                          left: 0,  // shift shadow right
                          right: 20, // shift shadow left
                        ),
                        child: AnimatedBuilder(
                          animation: _shadowStretch,
                          builder: (context, child) {
                            return SharpOvalShadow(
                              width: 200 * _shadowStretch.value,
                              height: 52,
                              intensity: 1.0,
                            );
                          },
                        ),
                      ),

                      // The lettuce image
                      Image.asset('assets/images/lettuce_una.png'),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    _floatController = AnimationController(vsync: this, duration: const Duration(seconds: 3))
      ..repeat(reverse: true);
    _float = Tween<double>(begin: -6, end: 6).animate(CurvedAnimation(parent: _floatController, curve: Curves.easeInOut));
    _pulse = Tween<double>(begin: 0.0, end: 1.0).animate(CurvedAnimation(parent: _floatController, curve: Curves.easeInOut));

    _shadowController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
    )..repeat(reverse: true);

    _shadowStretch = Tween<double>(begin: 1.0, end: 1.3).animate(
      CurvedAnimation(parent: _shadowController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _floatController.dispose();
    _shadowController.dispose();
    super.dispose();
  }
}

class LevelBox extends StatelessWidget {
  final String label;
  final IconData icon;
  final Color startColor;
  final Color endColor;
  final bool isSelected;
  final VoidCallback? onTap;

  const LevelBox({
    super.key,
    required this.label,
    required this.icon,
    required this.startColor,
    required this.endColor,
    this.isSelected = false,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    final ColorScheme scheme = Theme.of(context).colorScheme;

    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onTap,
          child: Container(
            height: 110,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [startColor, endColor],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(16),
              border: isSelected
                  ? Border.all(color: Colors.white.withValues(alpha: 0.6), width: 2)
                  : null,
              boxShadow: [
                BoxShadow(
                  color: scheme.primary.withValues(alpha: 0.12),
                  blurRadius: 12,
                  offset: const Offset(0, 6),
                ),
              ],
            ),
            child: Stack(
              children: [
                Positioned(
                  right: -10,
                  bottom: -10,
                  child: Icon(
                    icon,
                    size: 96,
                    color: Colors.white.withValues(alpha: 0.15),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        children: [
                          Icon(icon, color: Colors.white, size: 28),
                          const SizedBox(width: 8),
                          if (isSelected)
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                              decoration: BoxDecoration(
                                color: Colors.white.withValues(alpha: 0.2),
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: const [
                                  Icon(Icons.check, color: Colors.white, size: 14),
                                  SizedBox(width: 4),
                                  Text('Selected', style: TextStyle(color: Colors.white, fontSize: 12, fontWeight: FontWeight.w600)),
                                ],
                              ),
                            ),
                        ],
                      ),
                      Text(
                        label,
                        style: GoogleFonts.inter(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.w700,
                          letterSpacing: 0.2,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class AddPlantsOnboarding extends StatefulWidget {
  final VoidCallback? onPlantAdded;

  const AddPlantsOnboarding({super.key, this.onPlantAdded});

  @override
  State<AddPlantsOnboarding> createState() => _AddPlantsOnboardingState();
}

class _AddPlantsOnboardingState extends State<AddPlantsOnboarding> {
  int _currentStep = 0;

  // Form data
  final TextEditingController _plantNameController = TextEditingController();
  String? _selectedImagePath;
  String? _uploadedImageUrl;
  int _daysToHarvest = 30;
  int _waterDurationHours = 2;
  bool _isHarvestSelected = true; // Track which duration type is selected
  bool _isUploadingImage = false; // Track image upload state
  bool _isSavingPlant = false; // Track plant saving state

  // Save plant data to database
  Future<void> _savePlant() async {
    if (_plantNameController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please enter a plant name'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    if (_uploadedImageUrl == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please upload a plant image'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() => _isSavingPlant = true);

    try {
      // Debug: Check authentication
      final currentUser = SupabaseConfig.currentUser;
      print('üîç AUTH CHECK: Current user ID: ${currentUser?.id}');
      print('üîç AUTH CHECK: User email: ${currentUser?.email}');
      print('üîç AUTH CHECK: Session exists: ${SupabaseConfig.currentSession != null}');

      if (currentUser == null) {
        throw Exception('You are not logged in. Please log in first.');
      }

      print('üìù PLANT DATA:');
      print('   Name: ${_plantNameController.text.trim()}');
      print('   Image URL: $_uploadedImageUrl');
      print('   Days to harvest: $_daysToHarvest');
      print('   Water interval: $_waterDurationHours');

      // Create the plant in database with uploaded image URL
      final newPlant = await PlantService.createPlant(
        name: _plantNameController.text.trim(),
        imageUrl: _uploadedImageUrl!, // This stores the Supabase storage URL
        daysToHarvest: _daysToHarvest,
        waterIntervalHours: _waterDurationHours,
      );

      print('‚úÖ SUCCESS: Plant created with ID: ${newPlant.id}');

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Plant added successfully! Check Available Plants to see it.'),
            backgroundColor: Color(0xFF16A34A),
          ),
        );

        // Reset form
        _plantNameController.clear();
        setState(() {
          _selectedImagePath = null;
          _uploadedImageUrl = null;
          _daysToHarvest = 30;
          _waterDurationHours = 2;
          _currentStep = 0;
        });

        // Call the callback to refresh available plants
        widget.onPlantAdded?.call();

        // Close the bottom sheet to return to available plants view
        Navigator.of(context).pop();
      }
    } catch (e) {
      print('‚ùå ERROR: Failed to save plant: $e');
      print('‚ùå ERROR: Error type: ${e.runtimeType}');
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to save plant: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() => _isSavingPlant = false);
    }
  }

  final List<Map<String, String>> _steps = [
    {
      'title': 'Plant Name',
      'description': 'What is the name of your plant, seed, or vegetable?',
    },
    {
      'title': 'Upload Image',
      'description': 'Upload an image of your plant for easy identification.',
    },
    {
      'title': 'Set Duration',
      'description': 'Configure the growth and watering schedule for your plant.',
    },
    {
      'title': 'Preview & Add',
      'description': 'Review your plant details and add it to your garden.',
    },
  ];

  Future<void> _pickAndUploadImage(BuildContext context) async {
    try {
      // Show source selection dialog
      final ImageSource? source = await showDialog<ImageSource>(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            backgroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            title: Text(
              'Choose Image Source',
              style: GoogleFonts.inter(
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ListTile(
                  leading: const Icon(Icons.photo_library, color: Color(0xFF4ADE80)),
                  title: Text(
                    'Gallery',
                    style: GoogleFonts.inter(),
                  ),
                  onTap: () => Navigator.of(context).pop(ImageSource.gallery),
                ),
                ListTile(
                  leading: const Icon(Icons.camera_alt, color: Color(0xFF3B82F6)),
                  title: Text(
                    'Camera',
                    style: GoogleFonts.inter(),
                  ),
                  onTap: () => Navigator.of(context).pop(ImageSource.camera),
                ),
              ],
            ),
          );
        },
      );

      if (source == null) return;

      setState(() => _isUploadingImage = true);

      // Pick image
      final XFile? imageFile = source == ImageSource.gallery
          ? await ImageUploadService.pickImageFromGallery()
          : await ImageUploadService.pickImageFromCamera();

      if (imageFile == null) {
        setState(() => _isUploadingImage = false);
        return;
      }

      // Upload to Supabase
      final String userId = SupabaseConfig.currentUser?.id ?? 'anonymous';
      final String imageUrl = await ImageUploadService.uploadImageToSupabase(imageFile, userId);

      setState(() {
        _uploadedImageUrl = imageUrl;
        _selectedImagePath = imageFile.path;
        _isUploadingImage = false;
      });

      // Show success message
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Image uploaded successfully!'),
            backgroundColor: Color(0xFF16A34A),
          ),
        );
      }
    } catch (e) {
      setState(() => _isUploadingImage = false);

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to upload image: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Widget _buildTimeSelector({
    required String label,
    required int value,
    required VoidCallback onIncrement,
    required VoidCallback? onDecrement,
    required Color color,
  }) {
    return Column(
      children: [
        Text(
          label,
          style: GoogleFonts.inter(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: Colors.grey[700],
          ),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Container(
          width: 80,
          height: 105,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[300]!),
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withValues(alpha: 0.1),
                blurRadius: 4,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              IconButton(
                onPressed: onIncrement,
                icon: Icon(
                  Icons.keyboard_arrow_up,
                  color: color,
                  size: 20,
                ),
                padding: const EdgeInsets.all(1),
                constraints: const BoxConstraints(
                  minWidth: 32,
                  minHeight: 32,
                ),
              ),
              Container(
                margin: const EdgeInsets.only(top: -6, bottom: -6),
                child: Text(
                  value.toString(),
                  style: GoogleFonts.inter(
                    fontSize: 18,
                    fontWeight: FontWeight.w700,
                    color: color,
                  ),
                ),
              ),
              IconButton(
                onPressed: onDecrement,
                icon: Icon(
                  Icons.keyboard_arrow_down,
                  color: onDecrement != null ? color : Colors.grey[300],
                  size: 20,
                ),
                padding: const EdgeInsets.all(1),
                constraints: const BoxConstraints(
                  minWidth: 32,
                  minHeight: 32,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildStepContent() {
    switch (_currentStep) {
      case 0: // Plant Name
        return Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[200]!),
          ),
          child: TextField(
            controller: _plantNameController,
            decoration: InputDecoration(
              labelText: 'Enter plant name',
              hintText: 'e.g. Lettuce, Pechay',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              filled: true,
              fillColor: Colors.white,
            ),
            style: GoogleFonts.inter(),
          ),
        );

      case 1: // Upload Image
        return Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[200]!),
          ),
          child: Column(
            children: [
              GestureDetector(
                onTap: _isUploadingImage ? null : () => _pickAndUploadImage(context),
                child: Container(
                  width: 120,
                  height: 120,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: _isUploadingImage
                          ? Colors.grey[400]!
                          : const Color(0xFF4ADE80),
                      width: 2,
                    ),
                  ),
                  child: _isUploadingImage
                      ? const Center(
                          child: CircularProgressIndicator(
                            valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF4ADE80)),
                          ),
                        )
                      : _uploadedImageUrl != null
                          ? ClipRRect(
                              borderRadius: BorderRadius.circular(10),
                              child: Image.network(
                                _uploadedImageUrl!,
                                fit: BoxFit.cover,
                                loadingBuilder: (context, child, loadingProgress) {
                                  if (loadingProgress == null) return child;
                                  return const Center(
                                    child: CircularProgressIndicator(
                                      valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF4ADE80)),
                                    ),
                                  );
                                },
                                errorBuilder: (context, error, stackTrace) {
                                  return Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Icon(
                                        Icons.error,
                                        size: 40,
                                        color: Colors.red[400],
                                      ),
                                      const SizedBox(height: 8),
                                      Text(
                                        'Failed to load',
                                        style: GoogleFonts.inter(
                                          color: Colors.red[400],
                                          fontWeight: FontWeight.w500,
                                          fontSize: 12,
                                        ),
                                      ),
                                    ],
                                  );
                                },
                              ),
                            )
                          : Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  Icons.add_photo_alternate,
                                  size: 40,
                                  color: const Color(0xFF4ADE80),
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  'Upload Image',
                                  style: GoogleFonts.inter(
                                    color: const Color(0xFF4ADE80),
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                _uploadedImageUrl != null
                    ? 'Image uploaded successfully! Tap to change.'
                    : 'Upload a clear image of your plant for easy identification',
                style: GoogleFonts.inter(
                  fontSize: 14,
                  color: _uploadedImageUrl != null
                      ? const Color(0xFF16A34A)
                      : Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        );

      case 2: // Set Duration
        return Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[200]!),
          ),
          child: Column(
            children: [
              // Header with two clickable sections
              Row(
                children: [
                  Expanded(
                    child: GestureDetector(
                      onTap: () => setState(() => _isHarvestSelected = true),
                      child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        decoration: BoxDecoration(
                          color: _isHarvestSelected ? const Color(0xFF4ADE80) : Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(
                            color: const Color(0xFF4ADE80),
                            width: _isHarvestSelected ? 0 : 2,
                          ),
                        ),
                        child: Center(
                          child: Text(
                            'Harvest',
                            style: GoogleFonts.inter(
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                              color: _isHarvestSelected ? Colors.white : const Color(0xFF4ADE80),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: GestureDetector(
                      onTap: () => setState(() => _isHarvestSelected = false),
                      child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        decoration: BoxDecoration(
                          color: !_isHarvestSelected ? const Color(0xFF3B82F6) : Colors.white,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(
                            color: const Color(0xFF3B82F6),
                            width: !_isHarvestSelected ? 0 : 2,
                          ),
                        ),
                        child: Center(
                          child: Text(
                            'Water',
                            style: GoogleFonts.inter(
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                              color: !_isHarvestSelected ? Colors.white : const Color(0xFF3B82F6),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              // Rolling selectors based on selection
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: _isHarvestSelected
                    ? _buildTimeSelector(
                        label: 'Days to Harvest',
                        value: _daysToHarvest,
                        onIncrement: () => setState(() => _daysToHarvest++),
                        onDecrement: _daysToHarvest > 1 ? () => setState(() => _daysToHarvest--) : null,
                        color: const Color(0xFF4ADE80),
                      )
                    : _buildTimeSelector(
                        label: 'Water Interval (hours)',
                        value: _waterDurationHours,
                        onIncrement: () => setState(() => _waterDurationHours++),
                        onDecrement: _waterDurationHours > 1 ? () => setState(() => _waterDurationHours--) : null,
                        color: const Color(0xFF3B82F6),
                      ),
              ),
            ],
          ),
        );

      case 3: // Preview
        return Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[200]!),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Preview',
                style: GoogleFonts.inter(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              // Preview card matching available plants design
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withValues(alpha: 0.1),
                      blurRadius: 6,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    // Plant image
                    Container(
                      width: 48,
                      height: 48,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(
                          color: const Color(0xFF4ADE80),
                          width: 1.5,
                        ),
                        boxShadow: [
                          BoxShadow(
                            color: const Color(0xFF4ADE80).withValues(alpha: 0.3),
                            blurRadius: 4,
                            spreadRadius: 0.5,
                          ),
                        ],
                        image: DecorationImage(
                          image: _uploadedImageUrl != null
                              ? NetworkImage(_uploadedImageUrl!)
                              : const AssetImage('assets/images/lettuce_seedbag.png'),
                          fit: BoxFit.cover,
                        ),
                      ),
                      child: Stack(
                        children: [
                          Positioned(
                            bottom: 1,
                            right: 1,
                            child: Container(
                              padding: const EdgeInsets.symmetric(horizontal: 3, vertical: 1),
                              decoration: BoxDecoration(
                                color: const Color(0xFF4ADE80),
                                borderRadius: BorderRadius.circular(4),
                              ),
                              child: Text(
                                'Free',
                                style: GoogleFonts.inter(
                                  fontSize: 6,
                                  fontWeight: FontWeight.w700,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(width: 12),
                    // Plant info
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            _plantNameController.text.isNotEmpty
                                ? _plantNameController.text
                                : 'Your Plant Name',
                            style: GoogleFonts.inter(
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                              color: Colors.black87,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                          const SizedBox(height: 4),
                          Row(
                            children: [
                              Row(
                                children: [
                                  Icon(
                                    Icons.grass,
                                    size: 12,
                                    color: const Color(0xFF4ADE80),
                                  ),
                                  const SizedBox(width: 3),
                                  Text(
                                    '$_daysToHarvest days',
                                    style: GoogleFonts.inter(
                                      fontSize: 11,
                                      fontWeight: FontWeight.w500,
                                      color: Colors.grey[700],
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(width: 12),
                              Row(
                                children: [
                                  Icon(
                                    Icons.water_drop,
                                    size: 12,
                                    color: const Color(0xFF3B82F6),
                                  ),
                                  const SizedBox(width: 3),
                                  Text(
                                    '$_waterDurationHours hours',
                                    style: GoogleFonts.inter(
                                      fontSize: 11,
                                      fontWeight: FontWeight.w500,
                                      color: Colors.grey[700],
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    Container(
                      width: 32,
                      height: 32,
                      decoration: BoxDecoration(
                        color: const Color(0xFF4ADE80).withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: const Icon(
                        Icons.arrow_forward_ios,
                        color: Color(0xFF16A34A),
                        size: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );

      default:
        return const SizedBox.shrink();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Main content area
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Row(
              children: [
                // Progress steps (left side)
                Container(
                  width: 60,
                  child: LayoutBuilder(
                    builder: (context, constraints) {
                      final availableHeight = constraints.maxHeight;
                      final totalSteps = _steps.length;
                      final stepSpacing = availableHeight / totalSteps;

                      return Stack(
                        children: [
                          // Connecting lines (properly centered and connected)
                          ...List.generate(
                            totalSteps - 1,
                            (index) {
                              final circleCenter1 = (stepSpacing * index) + (stepSpacing / 2); // Center of first circle
                              final circleCenter2 = (stepSpacing * (index + 1)) + (stepSpacing / 2); // Center of second circle
                              final lineTop = circleCenter1 + 20; // Start from bottom of first circle
                              final lineBottom = circleCenter2 - 20; // End at top of second circle
                              final lineHeight = lineBottom - lineTop;

                              return Positioned(
                                top: lineTop,
                                left: 29, // Center of the 60px progress container (60/2 - 1 for 2px line width)
                                child: Container(
                                  width: 2,
                                  height: lineHeight,
                                  color: index < _currentStep
                                      ? const Color(0xFF4ADE80)
                                      : const Color(0xFF16A34A).withValues(alpha: 0.3),
                                ),
                              );
                            },
                          ),
                          // Step circles (better distributed)
                          ...List.generate(
                            totalSteps,
                            (index) {
                              final topPosition = (stepSpacing * index) + (stepSpacing / 2) - 20; // Center in each segment

                              return Positioned(
                                top: topPosition,
                                left: 0,
                                right: 0,
                                child: ProgressStepItem(
                                  stepNumber: index + 1,
                                  isActive: index == _currentStep,
                                  isCompleted: index < _currentStep,
                                  onTap: () {
                                    // Allow jumping to any step
                                    setState(() => _currentStep = index);
                                  },
                                ),
                              );
                            },
                          ),
                        ],
                      );
                    },
                  ),
                ),
                const SizedBox(width: 20),
                // Content (right side)
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _steps[_currentStep]['title']!,
                        style: GoogleFonts.inter(
                          fontSize: 24,
                          fontWeight: FontWeight.w700,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 12),
                      Text(
                        _steps[_currentStep]['description']!,
                        style: GoogleFonts.inter(
                          fontSize: 16,
                          color: Colors.grey[600],
                          height: 1.5,
                        ),
                      ),
                      const SizedBox(height: 32),
                      // Step-specific content
                      _buildStepContent(),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
        // Fixed navigation buttons at bottom
        Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white,
            border: Border(
              top: BorderSide(color: Colors.grey[200]!, width: 1),
            ),
          ),
          child: Row(
            children: [
              // Previous button (only show when not on first step)
              if (_currentStep > 0)
                Expanded(
                  child: OutlinedButton(
                    onPressed: () {
                      setState(() => _currentStep--);
                    },
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(
                        color: Color(0xFF4ADE80),
                        width: 2,
                      ),
                      foregroundColor: const Color(0xFF4ADE80),
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      'Previous',
                      style: GoogleFonts.inter(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              if (_currentStep > 0) const SizedBox(width: 16),
              // Next button (expand to full width when Previous is hidden)
              Expanded(
                child: ElevatedButton(
                  onPressed: () async {
                    if (_currentStep < _steps.length - 1) {
                      setState(() => _currentStep++);
                    } else {
                      // Save the plant before closing
                      await _savePlant();
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF4ADE80), // Primary green
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    elevation: 2,
                  ),
                  child: Text(
                    _currentStep == _steps.length - 1 ? 'Add Plant' : 'Next',
                    style: GoogleFonts.inter(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}

class ProgressStepItem extends StatelessWidget {
  final int stepNumber;
  final bool isActive;
  final bool isCompleted;
  final VoidCallback? onTap;

  const ProgressStepItem({
    super.key,
    required this.stepNumber,
    required this.isActive,
    required this.isCompleted,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    Color getColor() {
      if (isCompleted) return const Color(0xFF4ADE80);
      if (isActive) return const Color(0xFF22C55E);
      return const Color(0xFF16A34A).withValues(alpha: 0.3);
    }

    Color getLineColor() {
      if (isCompleted) return const Color(0xFF4ADE80);
      return const Color(0xFF16A34A).withValues(alpha: 0.3);
    }

    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: getColor(),
          shape: BoxShape.circle,
          border: Border.all(
            color: isActive ? const Color(0xFF4ADE80) : Colors.transparent,
            width: 2,
          ),
          boxShadow: isActive
              ? [
                  BoxShadow(
                    color: const Color(0xFF4ADE80).withValues(alpha: 0.3),
                    blurRadius: 8,
                    spreadRadius: 1,
                  ),
                ]
              : null,
        ),
        child: Center(
          child: Text(
            stepNumber.toString(),
            style: GoogleFonts.inter(
              color: Colors.white,
              fontWeight: FontWeight.w700,
              fontSize: 16,
            ),
          ),
        ),
      ),
    );
  }
}

// Plant data model
class PlantData {
  final String name;
  final String imagePath;
  final int minDaysToHarvest;
  final int maxDaysToHarvest;
  final int minWaterDurationHours;
  final int maxWaterDurationHours;

  const PlantData({
    required this.name,
    required this.imagePath,
    required this.minDaysToHarvest,
    required this.maxDaysToHarvest,
    required this.minWaterDurationHours,
    required this.maxWaterDurationHours,
  });
}

class AvailablePlantsContent extends StatefulWidget {
  const AvailablePlantsContent({super.key});

  @override
  State<AvailablePlantsContent> createState() => _AvailablePlantsContentState();
}

class _AvailablePlantsContentState extends State<AvailablePlantsContent> {
  List<Plant> _userPlants = [];
  bool _isLoading = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    _loadUserPlants();
  }

  Future<void> _loadUserPlants() async {
    try {
      print('DEBUG: Loading user plants...');
      setState(() => _isLoading = true);
      final plants = await PlantService.getUserPlants();
      print('DEBUG: Loaded ${plants.length} plants');
      setState(() {
        _userPlants = plants;
        _isLoading = false;
        _error = null;
      });
    } catch (e) {
      print('DEBUG: Error loading plants: $e');
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
    }
  }

  Future<void> _editPlant(Plant plant) async {
    // Show edit dialog
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => EditPlantDialog(plant: plant),
    );

    if (result == true) {
      // Refresh the plant list
      await _loadUserPlants();
    }
  }

  Future<void> _deletePlant(Plant plant) async {
    final shouldDelete = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        title: Text(
          'Delete Plant',
          style: GoogleFonts.inter(
            fontWeight: FontWeight.w700,
            color: Colors.black87,
          ),
        ),
        content: Text(
          'Are you sure you want to delete "${plant.name}"? This action cannot be undone.',
          style: GoogleFonts.inter(
            color: Colors.grey[700],
            fontSize: 14,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text(
              'Cancel',
              style: GoogleFonts.inter(
                color: Colors.grey[600],
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFEF4444),
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: Text(
              'Delete',
              style: GoogleFonts.inter(
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );

    if (shouldDelete == true) {
      try {
        setState(() => _isLoading = true);
        await PlantService.deletePlant(plant.id);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Plant "${plant.name}" deleted successfully'),
            backgroundColor: const Color(0xFF16A34A),
          ),
        );
        await _loadUserPlants();
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to delete plant: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(
        child: CircularProgressIndicator(
          valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF4ADE80)),
        ),
      );
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 48,
              color: Colors.red[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Failed to load plants',
              style: GoogleFonts.inter(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.red[400],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              _error!,
              style: GoogleFonts.inter(
                fontSize: 14,
                color: Colors.grey[600],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _loadUserPlants,
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF4ADE80),
                foregroundColor: Colors.white,
              ),
              child: Text(
                'Retry',
                style: GoogleFonts.inter(fontWeight: FontWeight.w600),
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadUserPlants,
      color: const Color(0xFF4ADE80),
      child: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          // Category label
          Container(
            margin: const EdgeInsets.only(bottom: 16),
            child: Text(
              'Your Plants',
              style: GoogleFonts.inter(
                fontSize: 16,
                fontWeight: FontWeight.w700,
                color: const Color(0xFF4ADE80),
              ),
            ),
          ),

          // User's plants
          if (_userPlants.isEmpty)
            Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.eco,
                    size: 64,
                    color: Colors.grey[400],
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'No plants added yet',
                    style: GoogleFonts.inter(
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                      color: Colors.grey[600],
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Add your first plant using the + button',
                    style: GoogleFonts.inter(
                      fontSize: 14,
                      color: Colors.grey[500],
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            )
          else
            ..._userPlants.map((plant) => UserPlantCard(
              plant: plant,
              onEdit: () => _editPlant(plant),
              onDelete: () => _deletePlant(plant),
            )).toList(),

          // Free trial section (only show if no user plants)
          if (_userPlants.isEmpty) ...[
            const SizedBox(height: 32),
            Container(
              margin: const EdgeInsets.only(bottom: 16),
              child: Text(
                'Free Trial',
                style: GoogleFonts.inter(
                  fontSize: 16,
                  fontWeight: FontWeight.w700,
                  color: const Color(0xFF4ADE80),
                ),
              ),
            ),
            // Sample plant cards for free trial
            ..._getSamplePlants().map((plant) => PlantCard(plant: plant)).toList(),
          ],
        ],
      ),
    );
  }

  List<PlantData> _getSamplePlants() {
    return [
      const PlantData(
        name: 'Lettuce',
        imagePath: 'assets/images/lettuce_seedbag.png',
        minDaysToHarvest: 35,
        maxDaysToHarvest: 45,
        minWaterDurationHours: 1,
        maxWaterDurationHours: 2,
      ),
      const PlantData(
        name: 'Pechay',
        imagePath: 'assets/images/pechay_seedbag.png',
        minDaysToHarvest: 25,
        maxDaysToHarvest: 35,
        minWaterDurationHours: 1,
        maxWaterDurationHours: 2,
      ),
    ];
  }
}

class PlantCard extends StatelessWidget {
  final PlantData plant;

  const PlantCard({super.key, required this.plant});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withValues(alpha: 0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          // Plant image
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: const Color(0xFF4ADE80),
                width: 2,
              ),
              boxShadow: [
                BoxShadow(
                  color: const Color(0xFF4ADE80).withValues(alpha: 0.5),
                  blurRadius: 8,
                  spreadRadius: 1,
                ),
              ],
              image: DecorationImage(
                image: AssetImage(plant.imagePath),
                fit: BoxFit.cover,
              ),
            ),
            child: Stack(
              children: [
                // Free text overlay (bottom right)
                Positioned(
                  bottom: 2,
                  right: 2,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                    decoration: BoxDecoration(
                      color: const Color(0xFF4ADE80),
                      borderRadius: BorderRadius.circular(6),
                    ),
                    child: Text(
                      'Free',
                      style: GoogleFonts.inter(
                        fontSize: 8,
                        fontWeight: FontWeight.w700,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(width: 16),
          // Plant info
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  plant.name,
                  style: GoogleFonts.inter(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    // Harvest duration
                    Row(
                      children: [
                        Icon(
                          Icons.grass,
                          size: 16,
                          color: const Color(0xFF4ADE80),
                        ),
                        const SizedBox(width: 4),
                        Text(
                          '${plant.minDaysToHarvest}-${plant.maxDaysToHarvest}d',
                          style: GoogleFonts.inter(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(width: 16),
                    // Water duration
                    Row(
                      children: [
                        Icon(
                          Icons.water_drop,
                          size: 16,
                          color: const Color(0xFF3B82F6),
                        ),
                        const SizedBox(width: 4),
                        Text(
                          '${plant.minWaterDurationHours}-${plant.maxWaterDurationHours}h',
                          style: GoogleFonts.inter(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
          // Arrow icon
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: const Color(0xFF4ADE80).withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(20),
            ),
            child: const Icon(
              Icons.arrow_forward_ios,
              color: Color(0xFF16A34A),
              size: 16,
            ),
          ),
        ],
      ),
    );
  }
}

class UserPlantCard extends StatelessWidget {
  final Plant plant;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;

  const UserPlantCard({
    super.key,
    required this.plant,
    this.onEdit,
    this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withValues(alpha: 0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          // Plant image (from Supabase storage)
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: const Color(0xFF4ADE80),
                width: 2,
              ),
              boxShadow: [
                BoxShadow(
                  color: const Color(0xFF4ADE80).withValues(alpha: 0.5),
                  blurRadius: 8,
                  spreadRadius: 1,
                ),
              ],
              image: plant.imageUrl != null
                  ? DecorationImage(
                      image: NetworkImage(plant.imageUrl!),
                      fit: BoxFit.cover,
                      onError: (exception, stackTrace) {
                        // Handle image loading errors
                      },
                    )
                  : null,
            ),
            child: plant.imageUrl == null
                ? const Icon(
                    Icons.image_not_supported,
                    color: Color(0xFF4ADE80),
                    size: 30,
                  )
                : null,
          ),
          const SizedBox(width: 16),
          // Plant info
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  plant.name,
                  style: GoogleFonts.inter(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    // Harvest duration
                    Row(
                      children: [
                        Icon(
                          Icons.grass,
                          size: 16,
                          color: const Color(0xFF4ADE80),
                        ),
                        const SizedBox(width: 4),
                        Text(
                          '${plant.daysToHarvest} days',
                          style: GoogleFonts.inter(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(width: 16),
                    // Water duration
                    Row(
                      children: [
                        Icon(
                          Icons.water_drop,
                          size: 16,
                          color: const Color(0xFF3B82F6),
                        ),
                        const SizedBox(width: 4),
                        Text(
                          '${plant.waterIntervalHours} hours',
                          style: GoogleFonts.inter(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  'Added ${plant.createdAt.toLocal().toString().split(' ')[0]}',
                  style: GoogleFonts.inter(
                    fontSize: 12,
                    color: Colors.grey[500],
                  ),
                ),
              ],
            ),
          ),
          // Action buttons
          Row(
            children: [
              // Edit button
              IconButton(
                onPressed: onEdit,
                icon: const Icon(
                  Icons.edit,
                  color: Color(0xFF3B82F6),
                  size: 20,
                ),
                tooltip: 'Edit plant',
                padding: const EdgeInsets.all(8),
                constraints: const BoxConstraints(
                  minWidth: 32,
                  minHeight: 32,
                ),
              ),
              // Delete button
              IconButton(
                onPressed: onDelete,
                icon: const Icon(
                  Icons.delete,
                  color: Color(0xFFEF4444),
                  size: 20,
                ),
                tooltip: 'Delete plant',
                padding: const EdgeInsets.all(8),
                constraints: const BoxConstraints(
                  minWidth: 32,
                  minHeight: 32,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class EditPlantDialog extends StatefulWidget {
  final Plant plant;

  const EditPlantDialog({super.key, required this.plant});

  @override
  State<EditPlantDialog> createState() => _EditPlantDialogState();
}

class _EditPlantDialogState extends State<EditPlantDialog> {
  late TextEditingController _nameController;
  String? _selectedImagePath;
  String? _uploadedImageUrl;
  late int _daysToHarvest;
  late int _waterDurationHours;
  bool _isUploadingImage = false;
  bool _isSaving = false;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.plant.name);
    _uploadedImageUrl = widget.plant.imageUrl;
    _daysToHarvest = widget.plant.daysToHarvest;
    _waterDurationHours = widget.plant.waterIntervalHours;
  }

  @override
  void dispose() {
    _nameController.dispose();
    super.dispose();
  }

  Future<void> _pickAndUploadImage(BuildContext context) async {
    try {
      final ImageSource? source = await showDialog<ImageSource>(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            backgroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            title: Text(
              'Choose Image Source',
              style: GoogleFonts.inter(
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ListTile(
                  leading: const Icon(Icons.photo_library, color: Color(0xFF4ADE80)),
                  title: Text(
                    'Gallery',
                    style: GoogleFonts.inter(),
                  ),
                  onTap: () => Navigator.of(context).pop(ImageSource.gallery),
                ),
                ListTile(
                  leading: const Icon(Icons.camera_alt, color: Color(0xFF3B82F6)),
                  title: Text(
                    'Camera',
                    style: GoogleFonts.inter(),
                  ),
                  onTap: () => Navigator.of(context).pop(ImageSource.camera),
                ),
              ],
            ),
          );
        },
      );

      if (source == null) return;

      setState(() => _isUploadingImage = true);

      final XFile? imageFile = source == ImageSource.gallery
          ? await ImageUploadService.pickImageFromGallery()
          : await ImageUploadService.pickImageFromCamera();

      if (imageFile == null) {
        setState(() => _isUploadingImage = false);
        return;
      }

      final String userId = SupabaseConfig.currentUser?.id ?? 'anonymous';
      final String imageUrl = await ImageUploadService.uploadImageToSupabase(imageFile, userId);

      setState(() {
        _uploadedImageUrl = imageUrl;
        _selectedImagePath = imageFile.path;
        _isUploadingImage = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Image uploaded successfully!'),
          backgroundColor: Color(0xFF16A34A),
        ),
      );
    } catch (e) {
      setState(() => _isUploadingImage = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to upload image: ${e.toString()}'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _saveChanges() async {
    if (_nameController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please enter a plant name'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() => _isSaving = true);

    try {
      await PlantService.updatePlant(
        plantId: widget.plant.id,
        name: _nameController.text.trim(),
        imageUrl: _uploadedImageUrl,
        daysToHarvest: _daysToHarvest,
        waterIntervalHours: _waterDurationHours,
      );

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Plant updated successfully!'),
            backgroundColor: Color(0xFF16A34A),
          ),
        );
        Navigator.of(context).pop(true); // Return true to indicate success
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to update plant: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() => _isSaving = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
      child: Container(
        constraints: const BoxConstraints(maxWidth: 400),
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            Row(
              children: [
                const Icon(
                  Icons.edit,
                  color: Color(0xFF3B82F6),
                  size: 28,
                ),
                const SizedBox(width: 12),
                Text(
                  'Edit Plant',
                  style: GoogleFonts.inter(
                    fontSize: 24,
                    fontWeight: FontWeight.w700,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 24),

            // Plant Name
            Text(
              'Plant Name',
              style: GoogleFonts.inter(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _nameController,
              decoration: InputDecoration(
                hintText: 'Enter plant name',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                filled: true,
                fillColor: Colors.grey[50],
              ),
              style: GoogleFonts.inter(),
            ),
            const SizedBox(height: 20),

            // Image Upload
            Text(
              'Plant Image',
              style: GoogleFonts.inter(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            GestureDetector(
              onTap: _isUploadingImage ? null : () => _pickAndUploadImage(context),
              child: Container(
                width: 100,
                height: 100,
                decoration: BoxDecoration(
                  color: Colors.grey[50],
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: _isUploadingImage
                        ? Colors.grey[400]!
                        : const Color(0xFF4ADE80),
                    width: 2,
                  ),
                ),
                child: _isUploadingImage
                    ? const Center(
                        child: CircularProgressIndicator(
                          valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF4ADE80)),
                        ),
                      )
                    : _uploadedImageUrl != null
                        ? ClipRRect(
                            borderRadius: BorderRadius.circular(10),
                            child: Image.network(
                              _uploadedImageUrl!,
                              fit: BoxFit.cover,
                              loadingBuilder: (context, child, loadingProgress) {
                                if (loadingProgress == null) return child;
                                return const Center(
                                  child: CircularProgressIndicator(
                                    valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF4ADE80)),
                                  ),
                                );
                              },
                              errorBuilder: (context, error, stackTrace) {
                                return const Center(
                                  child: Icon(
                                    Icons.image_not_supported,
                                    color: Color(0xFF4ADE80),
                                    size: 30,
                                  ),
                                );
                              },
                            ),
                          )
                        : const Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                Icons.add_photo_alternate,
                                size: 30,
                                color: Color(0xFF4ADE80),
                              ),
                              SizedBox(height: 4),
                              Text(
                                'Change\nImage',
                                style: TextStyle(
                                  color: Color(0xFF4ADE80),
                                  fontSize: 12,
                                  fontWeight: FontWeight.w500,
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),
              ),
            ),
            const SizedBox(height: 20),

            // Duration Settings
            Text(
              'Growth Duration',
              style: GoogleFonts.inter(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: Column(
                    children: [
                      Text(
                        'Days to Harvest',
                        style: GoogleFonts.inter(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                      const SizedBox(height: 4),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          color: Colors.grey[50],
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey[300]!),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            IconButton(
                              onPressed: () => setState(() => _daysToHarvest = _daysToHarvest > 1 ? _daysToHarvest - 1 : 1),
                              icon: const Icon(Icons.remove, size: 16),
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(minWidth: 24, minHeight: 24),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              _daysToHarvest.toString(),
                              style: GoogleFonts.inter(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(width: 8),
                            IconButton(
                              onPressed: () => setState(() => _daysToHarvest++),
                              icon: const Icon(Icons.add, size: 16),
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(minWidth: 24, minHeight: 24),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    children: [
                      Text(
                        'Water Interval (hours)',
                        style: GoogleFonts.inter(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                      const SizedBox(height: 4),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          color: Colors.grey[50],
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.grey[300]!),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            IconButton(
                              onPressed: () => setState(() => _waterDurationHours = _waterDurationHours > 1 ? _waterDurationHours - 1 : 1),
                              icon: const Icon(Icons.remove, size: 16),
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(minWidth: 24, minHeight: 24),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              _waterDurationHours.toString(),
                              style: GoogleFonts.inter(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(width: 8),
                            IconButton(
                              onPressed: () => setState(() => _waterDurationHours++),
                              icon: const Icon(Icons.add, size: 16),
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(minWidth: 24, minHeight: 24),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 32),

            // Action Buttons
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: _isSaving ? null : () => Navigator.of(context).pop(false),
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Color(0xFF3B82F6)),
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      'Cancel',
                      style: GoogleFonts.inter(
                        color: const Color(0xFF3B82F6),
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton(
                    onPressed: _isSaving ? null : _saveChanges,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF4ADE80),
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: _isSaving
                        ? const SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                          )
                        : Text(
                            'Save Changes',
                            style: GoogleFonts.inter(
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class AddPlantBottomSheet extends StatefulWidget {
  const AddPlantBottomSheet({super.key});

  @override
  State<AddPlantBottomSheet> createState() => _AddPlantBottomSheetState();
}

class _AddPlantBottomSheetState extends State<AddPlantBottomSheet> {
  int _selectedTab = 0; // 0 for Available plants, 1 for Add plants
  final GlobalKey<_AvailablePlantsContentState> _availablePlantsKey = GlobalKey();

  @override
  Widget build(BuildContext context) {
    return Container(
      height: MediaQuery.of(context).size.height * 0.85,
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(40),
          topRight: Radius.circular(40),
        ),
      ),
      child: Column(
        children: [
          // Handle bar
          Container(
            margin: const EdgeInsets.only(top: 10),
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(height: 20),
          // Tab buttons
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Row(
              children: [
                // Available plants tab
                Expanded(
                  child: GestureDetector(
                    onTap: () => setState(() => _selectedTab = 0),
                    child: Container(
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      decoration: BoxDecoration(
                        gradient: _selectedTab == 0
                            ? const LinearGradient(
                                colors: [Color(0xFF4ADE80), Color(0xFF22C55E)],
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                              )
                            : null,
                        color: _selectedTab == 0 ? null : Colors.white,
                        borderRadius: BorderRadius.circular(20),
                        border: _selectedTab == 0
                            ? null
                            : Border.all(color: const Color(0xFF4ADE80), width: 2),
                        boxShadow: _selectedTab == 0
                            ? [
                                BoxShadow(
                                  color: const Color(0xFF4ADE80).withValues(alpha: 0.3),
                                  blurRadius: 8,
                                  offset: const Offset(0, 4),
                                ),
                              ]
                            : [
                                BoxShadow(
                                  color: Colors.grey.withValues(alpha: 0.1),
                                  blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                      ),
                      child: Center(
                        child: Text(
                          'Available plants',
                          style: GoogleFonts.inter(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: _selectedTab == 0 ? Colors.white : const Color(0xFF4ADE80),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                // Add plants tab (circular icon button)
                GestureDetector(
                  onTap: () => setState(() => _selectedTab = 1),
                  child: Container(
                    width: 50,
                    height: 50,
                    decoration: BoxDecoration(
                      gradient: _selectedTab == 1
                          ? const LinearGradient(
                              colors: [Color(0xFF3B82F6), Color(0xFF1D4ED8)],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            )
                          : null,
                      color: _selectedTab == 1 ? null : Colors.white,
                      shape: BoxShape.circle,
                      border: _selectedTab == 1
                          ? null
                          : Border.all(color: const Color(0xFF3B82F6), width: 2),
                      boxShadow: _selectedTab == 1
                          ? [
                              BoxShadow(
                                color: const Color(0xFF3B82F6).withValues(alpha: 0.3),
                                blurRadius: 8,
                                offset: const Offset(0, 4),
                              ),
                            ]
                          : [
                              BoxShadow(
                                color: Colors.grey.withValues(alpha: 0.1),
                                blurRadius: 4,
                                offset: const Offset(0, 2),
                              ),
                            ],
                    ),
                    child: Icon(
                      Icons.add,
                      color: _selectedTab == 1 ? Colors.white : const Color(0xFF3B82F6),
                      size: 24,
                    ),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 20),
          // Content based on selected tab
          Expanded(
            child: _selectedTab == 0
                ? AvailablePlantsContent(key: _availablePlantsKey)
                : AddPlantsOnboarding(
                    onPlantAdded: () {
                      print('DEBUG: Plant added callback triggered');
                      // Switch to available plants tab and refresh
                      setState(() => _selectedTab = 0);
                      _availablePlantsKey.currentState?._loadUserPlants();
                    },
                  ),
          ),
        ],
      ),
    );
  }
}

class MetricDetailCard extends StatelessWidget {
  final MetricConfig config;
  const MetricDetailCard({super.key, required this.config});

  @override
  Widget build(BuildContext context) {
    final ColorScheme scheme = Theme.of(context).colorScheme;

    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [config.startColor, config.endColor],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: scheme.primary.withValues(alpha: 0.12),
            blurRadius: 16,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      padding: const EdgeInsets.all(18),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      config.resultLabel,
                      style: GoogleFonts.inter(
                        color: Colors.white.withValues(alpha: 0.9),
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        letterSpacing: 0.2,
                      ),
                    ),
                    const SizedBox(height: 6),
                    Text(
                      config.valueText,
                      style: GoogleFonts.inter(
                        color: Colors.white,
                        fontSize: 32,
                        fontWeight: FontWeight.w800,
                        letterSpacing: -0.5,
                      ),
                    ),
                    const SizedBox(height: 10),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                      decoration: BoxDecoration(
                        color: Colors.white.withValues(alpha: 0.18),
                        borderRadius: BorderRadius.circular(14),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(
                            config.type == MetricType.water
                                ? Icons.opacity
                                : config.type == MetricType.nutrients
                                ? Icons.science
                                : Icons.balance,
                            color: Colors.white,
                            size: 16,
                          ),
                          const SizedBox(width: 6),
                          Text(
                            config.statusText,
                            style: GoogleFonts.inter(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.w700,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              Icon(
                config.icon,
                color: Colors.white.withValues(alpha: 0.25),
                size: 72,
              ),
            ],
          ),
          const SizedBox(height: 16),
          _GradientProgressBar(
            progress: config.progress,
            backgroundColor: Colors.white.withValues(alpha: 0.18),
            fillColor: Colors.white,
          ),
          const SizedBox(height: 6),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                '0%'.padLeft(3, ' '),
                style: GoogleFonts.inter(color: Colors.white.withValues(alpha: 0.75), fontSize: 12, fontWeight: FontWeight.w600),
              ),
              Text(
                '100%'.padLeft(5, ' '),
                style: GoogleFonts.inter(color: Colors.white.withValues(alpha: 0.75), fontSize: 12, fontWeight: FontWeight.w600),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class _GradientProgressBar extends StatelessWidget {
  final double progress; // 0..1
  final Color backgroundColor;
  final Color fillColor;
  const _GradientProgressBar({required this.progress, required this.backgroundColor, required this.fillColor});

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(10),
      child: Stack(
        children: [
          Container(
            height: 10,
            color: backgroundColor,
          ),
          FractionallySizedBox(
            widthFactor: progress.clamp(0.0, 1.0),
            child: Container(
              height: 10,
              decoration: BoxDecoration(
                color: fillColor,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class ResultTile extends StatelessWidget {
  final String label;
  final String value;
  final Color color;
  final IconData icon;

  const ResultTile({
    super.key,
    required this.label,
    required this.value,
    required this.color,
    required this.icon,
  });

  @override
  Widget build(BuildContext context) {
    final ColorScheme scheme = Theme.of(context).colorScheme;
    return Container(
      decoration: BoxDecoration(
        color: scheme.surfaceContainerHighest,
        borderRadius: BorderRadius.circular(14),
        border: Border.all(color: scheme.outlineVariant),
      ),
      padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 12),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: color.withValues(alpha: 0.18),
              borderRadius: BorderRadius.circular(10),
            ),
            child: Icon(icon, color: color, size: 22),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: scheme.onSurface,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  value,
                  style: GoogleFonts.inter(
                    fontSize: 16,
                    fontWeight: FontWeight.w700,
                    color: scheme.onSurface,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class PlantsPage extends StatelessWidget {
  const PlantsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final ColorScheme scheme = Theme.of(context).colorScheme;
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        toolbarHeight: 80, // Consistent height with dashboard
        title: Text('Plants', style: GoogleFonts.inter(fontWeight: FontWeight.w600, fontSize: 20)),
        backgroundColor: Colors.transparent,
        surfaceTintColor: Colors.transparent,
        elevation: 0,
        scrolledUnderElevation: 0,
      ),
      backgroundColor: Colors.transparent,
      body: Center(
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              colors: [Color(0xFF80ED99), Color(0xFF57CC99)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: scheme.primary.withValues(alpha: 0.12),
                blurRadius: 16,
                offset: const Offset(0, 8),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              GlossyIcon(icon: Icons.eco, size: 48, color: Colors.white),
              const SizedBox(height: 10),
              Text('Your plants overview', style: GoogleFonts.inter(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w700)),
              Text('Coming soon', style: GoogleFonts.inter(color: Colors.white.withValues(alpha: 0.9))),
            ],
          ),
        ),
      ),
    );
  }
}

class InsightsPage extends StatelessWidget {
  const InsightsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final ColorScheme scheme = Theme.of(context).colorScheme;
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        toolbarHeight: 80, // Consistent height with dashboard
        title: Text('Insights', style: GoogleFonts.inter(fontWeight: FontWeight.w600, fontSize: 20)),
        backgroundColor: Colors.transparent,
        surfaceTintColor: Colors.transparent,
        elevation: 0,
        scrolledUnderElevation: 0,
      ),
      backgroundColor: Colors.transparent,
      body: Center(
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              colors: [Color(0xFF9775FA), Color(0xFF5C7CFA)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: scheme.primary.withValues(alpha: 0.12),
                blurRadius: 16,
                offset: const Offset(0, 8),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.bar_chart, color: Colors.white, size: 48),
              const SizedBox(height: 10),
              Text('Analytics & trends', style: GoogleFonts.inter(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w700)),
              Text('Coming soon', style: GoogleFonts.inter(color: Colors.white.withValues(alpha: 0.9))),
            ],
          ),
        ),
      ),
    );
  }
}

class NotchedNavigationPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint = Paint()
      ..color = Colors.white
      ..style = PaintingStyle.fill;

    final Path path = Path();

    // Start from bottom left
    path.moveTo(0, size.height);

    // Draw bottom line
    path.lineTo(size.width, size.height);

    // Draw right side curve
    path.lineTo(size.width, 32);
    path.quadraticBezierTo(size.width, 0, size.width - 32, 0);

    // Draw top line with notch
    path.lineTo(size.width / 2 + 30, 0);

    // Draw notch (concave curve)
    path.quadraticBezierTo(size.width / 2, -8, size.width / 2 - 30, 0);

    // Draw left side curve
    path.lineTo(32, 0);
    path.quadraticBezierTo(0, 0, 0, 32);

    // Close the path
    path.close();

    // Draw shadow
    final Paint shadowPaint = Paint()
      ..color = Colors.black.withValues(alpha: 0.1)
      ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 20);

    canvas.drawPath(path, shadowPaint);

    // Draw main shape
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

class GlassMorphismNotchedPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    // Create the main glass morphism effect with enhanced depth
    final Paint glassPaint = Paint()
      ..shader = LinearGradient(
        begin: Alignment.topCenter,
        end: Alignment.bottomCenter,
        colors: [
          Colors.white.withValues(alpha: 0.98),
          Colors.white.withValues(alpha: 0.92),
          Colors.white.withValues(alpha: 0.85),
          Colors.white.withValues(alpha: 0.78),
        ],
        stops: const [0.0, 0.3, 0.7, 1.0],
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height))
      ..style = PaintingStyle.fill;

    final Paint borderPaint = Paint()
      ..color = Colors.white.withValues(alpha: 0.4)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2.0;

    final Path path = Path();

    // Start from bottom left with rounded corner
    path.moveTo(0, size.height - 8);
    path.quadraticBezierTo(0, size.height, 8, size.height);

    // Draw bottom line
    path.lineTo(size.width - 8, size.height);
    path.quadraticBezierTo(size.width, size.height, size.width, size.height - 8);

    // Draw right side curve
    path.lineTo(size.width, 32);
    path.quadraticBezierTo(size.width, 0, size.width - 32, 0);

    // Draw top line with enhanced notch
    path.lineTo(size.width / 2 + 35, 0);

    // Draw enhanced notch (deeper concave curve)
    path.quadraticBezierTo(size.width / 2, -12, size.width / 2 - 35, 0);

    // Draw left side curve
    path.lineTo(32, 0);
    path.quadraticBezierTo(0, 0, 0, 32);

    // Close the path
    path.close();

    // Draw multiple shadow layers for enhanced depth
    final Paint shadowPaint1 = Paint()
      ..color = Colors.black.withValues(alpha: 0.12)
      ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 30);

    final Paint shadowPaint2 = Paint()
      ..color = Colors.black.withValues(alpha: 0.08)
      ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 20);

    final Paint shadowPaint3 = Paint()
      ..color = Colors.black.withValues(alpha: 0.05)
      ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 15);

    // Draw shadows in order (farthest to closest)
    canvas.drawPath(path, shadowPaint1);
    canvas.drawPath(path, shadowPaint2);
    canvas.drawPath(path, shadowPaint3);

    // Draw main glass shape
    canvas.drawPath(path, glassPaint);

    // Draw subtle border
    canvas.drawPath(path, borderPaint);

    // Add sophisticated inner highlights for premium glass effect
    final Paint highlightPaint1 = Paint()
      ..shader = LinearGradient(
        begin: Alignment.topLeft,
        end: Alignment.center,
        colors: [
          Colors.white.withValues(alpha: 0.5),
          Colors.transparent,
        ],
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height))
      ..style = PaintingStyle.fill;

    final Paint highlightPaint2 = Paint()
      ..shader = RadialGradient(
        center: Alignment.topCenter,
        radius: 0.6,
        colors: [
          Colors.white.withValues(alpha: 0.3),
          Colors.transparent,
        ],
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height))
      ..style = PaintingStyle.fill;

    // Draw highlights
    canvas.drawPath(path, highlightPaint1);
    canvas.drawPath(path, highlightPaint2);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}



class GlassMorphismCTAButton extends StatelessWidget {
  final IconData icon;
  final bool isSelected;

  const GlassMorphismCTAButton({
    super.key,
    required this.icon,
    required this.isSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 80,
      height: 80,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            const Color(0xFF4ADE80).withValues(alpha: 0.98), // Bright joyful green
            const Color(0xFF22C55E).withValues(alpha: 0.95), // Medium green
            const Color(0xFF16A34A).withValues(alpha: 0.90), // Darker green
            const Color(0xFF15803D).withValues(alpha: 0.85), // Deepest green
          ],
        ),
        border: Border.all(
          color: Colors.white.withValues(alpha: 0.6),
          width: 3,
        ),
        boxShadow: [
          // Primary green glow
          BoxShadow(
            color: const Color(0xFF4ADE80).withValues(alpha: 0.5),
            blurRadius: 25,
            offset: const Offset(0, 10),
            spreadRadius: 3,
          ),
          // Secondary green glow
          BoxShadow(
            color: const Color(0xFF22C55E).withValues(alpha: 0.3),
            blurRadius: 35,
            offset: const Offset(0, 15),
            spreadRadius: 5,
          ),
          // White highlight shadow
          BoxShadow(
            color: Colors.white.withValues(alpha: 0.4),
            blurRadius: 20,
            offset: const Offset(-4, -4),
            spreadRadius: 2,
          ),
          // Deep shadow for depth
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 30,
            offset: const Offset(0, 15),
            spreadRadius: 1,
          ),
        ],
      ),
      child: Container(
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          gradient: RadialGradient(
            center: Alignment.topLeft,
            radius: 0.7,
            colors: [
              Colors.white.withValues(alpha: 0.5),
              Colors.white.withValues(alpha: 0.2),
              Colors.transparent,
            ],
            stops: const [0.0, 0.6, 1.0],
          ),
        ),
        child: Stack(
          alignment: Alignment.center,
          children: [
            // Main icon
            Icon(
              icon,
              color: Colors.white,
              size: 36,
            ),
            // Subtle inner glow
            Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: RadialGradient(
                  center: Alignment.center,
                  radius: 0.8,
                  colors: [
                    const Color(0xFF4ADE80).withValues(alpha: 0.2),
                    Colors.transparent,
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class CapsuleGlassMorphismTab extends StatelessWidget {
  final IconData icon;
  final bool isSelected;
  final Color selectedColor;

  const CapsuleGlassMorphismTab({
    super.key,
    required this.icon,
    required this.isSelected,
    required this.selectedColor,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 56,
      height: 56,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(28),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: isSelected
              ? [
            selectedColor.withValues(alpha: 0.95),
            selectedColor.withValues(alpha: 0.85),
          ]
              : [
            Colors.white.withValues(alpha: 0.95),
            Colors.white.withValues(alpha: 0.85),
          ],
        ),
        border: Border.all(
          color: isSelected
              ? selectedColor.withValues(alpha: 0.4)
              : Colors.white.withValues(alpha: 0.4),
          width: 2,
        ),
        boxShadow: [
          BoxShadow(
            color: isSelected
                ? selectedColor.withValues(alpha: 0.3)
                : Colors.black.withValues(alpha: 0.1),
            blurRadius: 15,
            offset: const Offset(0, 6),
            spreadRadius: 1,
          ),
          BoxShadow(
            color: Colors.white.withValues(alpha: 0.3),
            blurRadius: 12,
            offset: const Offset(-3, -3),
            spreadRadius: 1,
          ),
        ],
      ),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(28),
          gradient: RadialGradient(
            center: Alignment.topLeft,
            radius: 0.8,
            colors: [
              Colors.white.withValues(alpha: 0.4),
              Colors.transparent,
            ],
          ),
        ),
        child: Icon(
          icon,
          color: isSelected ? Colors.white : Colors.grey[800],
          size: 24,
        ),
      ),
    );
  }
}


/// A pure-Dart sharp oval gradient shadow (no image assets).
/// Place beneath a floating object to simulate a crisp product-shot shadow.

class SharpOvalShadow extends StatelessWidget {
  const SharpOvalShadow({
    super.key,
    this.width = 220,
    this.height = 58,
    this.intensity = 1.0,
  });

  final double width;
  final double height;
  final double intensity;

  @override
  Widget build(BuildContext context) {
    final double baseDiameter = width;
    final double scaleY = (height / baseDiameter).clamp(0.05, 1.0);
    double _o(double v) => (v * intensity).clamp(0.0, 1.0);

    return IgnorePointer(
      child: Transform.scale(
        scaleY: scaleY,
        child: Container(
          width: baseDiameter,
          height: baseDiameter,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            gradient: RadialGradient(
              center: const Alignment(0.15, 0.05),
              colors: [
                Colors.black.withOpacity(_o(0.70)),
                Colors.black.withOpacity(_o(0.40)),
                Colors.black.withOpacity(_o(0.12)),
                Colors.black.withOpacity(0.0),
              ],
              stops: const [0.30, 0.60, 0.85, 1.00],
            ),
          ),
        ),
      ),
    );
  }
}

